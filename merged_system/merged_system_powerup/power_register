library IEEE;
use IEEE.std_logic_1164.ALL;

entity power_register is
   port(clk          : in  std_logic;
        reset        : in  std_logic;
	write_power  : in  std_logic;
        row          : in  std_logic_vector(4 downto 0);
        column       : in  std_logic_vector(4 downto 0);
        power_present : out std_logic;
	use_power    : out std_logic);
end power_register;

architecture behaviour of power_register is

  signal power_memory, new_power_memory : std_logic_vector (3 downto 0);
  signal power_reached : std_logic;

begin

  power_present <= not (power_reached);
  use_power <= write_power and not (power_reached);

  process(clk, reset)
  begin
    if(clk'event and clk = '1') then
      if(reset = '1') then
        -- all coins are reset
  	power_memory <= (others => '0');
      else
        power_memory <= new_power_memory;
      end if;
    end if;
  end process;

process(row, column, write_power, power_memory)
begin

if(write_power = '1') then
  case row is 
    when "00011" => 
      case column is
	when "00100" =>
	  new_power_memory <= power_memory(3 downto 1) & '1';
	when "10011" =>
	  new_power_memory <= power_memory(3 downto 2) & '1' & power_memory(0);
       	when others =>
	  new_power_memory <= power_memory;
      end case; -- that is the first row

    when "10100" =>
      case column is
	when "00100" =>
	  new_power_memory <= power_memory(3) & '1' & power_memory(1 downto 0);
        when "10011" =>
	  new_power_memory <= '1' & power_memory(2 downto 0);
	when others =>
	  new_power_memory <= power_memory;
      end case; -- that is the second row, done

    when others =>
      new_power_memory <= power_memory;

  end case;
else
  new_power_memory <= power_memory;
end if;

  case row is 
    when "00011" => 
      case column is
	when "00100" =>
	  power_reached <= power_memory(0);
	when "10011" =>
	  power_reached <= power_memory(1);
       	when others =>
	  power_reached <= '1';
      end case; -- that is the first row

    when "10100" =>
      case column is
	when "00100" =>
	  power_reached <= power_memory(2);
        when "10011" =>
	  power_reached <= power_memory(3);
	when others =>
	  power_reached <= '1';
      end case; -- that is the second row, done

    when others =>
	  power_reached <= '1';

  end case;

end process;

end behaviour;
